#!/sbin/sh
##########################################################################################
#
# Unofficial Magisk Module Template Install Script
# by topjohnwu, TheComputerGuy96
#
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any case
TMPDIR=/dev/tmp
MOUNTPATH=$TMPDIR/magisk_img
INSTALLER=$TMPDIR/install

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP=$3

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "***********************************"
  ui_print "! $MAGISKBIN isn't set up properly!"
  ui_print "! Please install Magisk v14.0+!"
  ui_print "***********************************"
  exit 1
}

mount /data 2>/dev/null

# Use the new Magisk binary path in Magisk v14.6+ (beta) (needed to improve reliability)
[ -d /data/adb/magisk ] && MAGISKBIN=/data/adb/magisk || MAGISKBIN=/data/magisk

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility functions
. $MAGISKBIN/util_functions.sh

get_outfd

# Image-related stuff (for forwards and backwards compatibility)
$BOOTMODE && [ -d /data/adb/magisk ] && IMG=/data/adb/magisk_merge.img || IMG=/data/magisk_merge.img
$BOOTMODE || [ -d /data/adb/magisk ] && IMG=/data/adb/magisk.img || IMG=/data/magisk.img

$BOOTMODE && [ -d /sbin/.core/img ] && BOOTMODEPATH=/sbin/.core/img || BOOTMODEPATH=/magisk

# Magisk A/B support check
if type mount_partitions >/dev/null; then
  mount_partitions
else
  # Mount partitions with some commands on Magisk v14.0
  ui_print "- Mounting /system, /vendor and /cache"
  mount -o ro /system 2>/dev/null
  mount -o ro /vendor 2>/dev/null
  mount /cache 2>/dev/null
fi

# Store boot mode-only magisk.img mount path in a variable (look above for the check)
$BOOTMODE && ! is_mounted $BOOTMODEPATH && abort "! Magisk isn't activated!"
[ ! -f /system/build.prop ] && abort "! /system couldn't be mounted!"

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you're creating Android version / platform-dependent mods

# We need busybox/binaries to be set up
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files
unzip -o "$ZIP" module.prop config.sh 'common/*' -d $INSTALLER 2>/dev/null

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract the ZIP file!"
# Load configurations
. $INSTALLER/config.sh

# Check the minimum Magisk version (MIN_VER variable updated for consistency)
MIN_VER=`grep_prop minMagisk $INSTALLER/module.prop`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print module name
print_modname

# Please leave this message in your flashable ZIP for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

request_zip_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with a size of ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM
fi

ui_print "- Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort "! $IMG mount failed..."

# Create mod paths
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

ui_print "- Extracting module's files"
unzip -o "$ZIP" 'system/*' -d $MODPATH 2>/dev/null
# Remove placeholder (people always forget to remove it...)
rm -f $MODPATH/system/placeholder 2>/dev/null

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
$AUTOMOUNT && touch $MODPATH/auto_mount

# .prop files
$PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH/system.prop

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch /magisk/$MODID/update
  cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
fi

# post-fs-data mode scripts
$POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh

# late_start service mode scripts
$LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/service.sh

ui_print "- Setting permissions"
set_permissions

##########################################################################################
# Finalizing
##########################################################################################

$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  ui_print "- Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
exit 0
